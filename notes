Starting from a list of live cells:

* Construct the tree of blocks/nodes
*   Generate hash
*   Canonicalize
*   Generate edges (and hashes?)
* Construct the corresponding tree of macronodes
*   Generate hash from node hash and neighboring edge hashes
*   Canonicalize
*   
*   Generate h
* Use successor data to repeat

Nodes are created together with their row/quadrant and edge arrays, and pooled with them.
Macronodes borrow references to their nodes and their neighboring edges.
Successors are created with a "new" pool and canonical store.
When the top level successor has been constructed, the current generation is over

A store is an array of (macro)nodes together with the index of the first unused one.
The index is incremented only when a (macro)node becomes canonical.
At the end of a generation, we keep at most twice the number of (macro)nodes that were used in excess of twice the number that were used. Any extras are popped from the array to allow GC. The index is then reset to zero.